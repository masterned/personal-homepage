{"version":3,"sources":["Resume.js","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["formatPhone","number","slice","formatEmail","email_object","user","domain","Address","props","data","className","line1","line2","city","state","zip","PersonalInfo","info","personal","name","_phone","phone","_email","email","github","address","toString","first","middle","charAt","last","href","Bio","bio","map","para","i","key","Skills","id","skills","skill","Education","Job","title","company","location","date","start","end","WorkExperience","work_experience","job","Array","isArray","join","Reference","References","references","reference","Resume","AboutMe","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"opFAIMA,EAAc,SAAAC,GAAM,iBAAQA,EAAOC,MAAM,EAAG,GAAxB,aAA+BD,EAAOC,MAAM,EAAG,GAA/C,YAAqDD,EAAOC,MAAM,KAEtFC,EAAc,SAAAC,GAAY,gBAAOA,EAAaC,KAApB,YAA4BD,EAAaE,SAEnEC,EAAU,SAAAC,GAAU,IAChBC,EAASD,EAATC,KAER,OACE,0BAAMC,UAAU,WACbD,EAAKE,MADR,OAEGF,EAAKG,MAFR,QAGGH,EAAKI,KAHR,QAIGJ,EAAKK,MAJR,QAKGL,EAAKM,MAKNC,EAAe,WAAO,IAAD,EAOrBC,EAAKC,SALPC,EAFuB,EAEvBA,KACOC,EAHgB,EAGvBC,MACOC,EAJgB,EAIvBC,MACAC,EALuB,EAKvBA,OACAC,EANuB,EAMvBA,QAGIJ,EAAQrB,EAAYoB,EAAOM,YAC3BH,EAAQpB,EAAYmB,GAE1B,OACE,iCACE,4BAAQZ,UAAU,SAASS,EAAKQ,MAAhC,IAAwCR,EAAKS,OAAOC,OAAO,GAA3D,KAAiEV,EAAKW,MACtE,4BAAQpB,UAAU,YAChB,0BAAMA,UAAU,SAASW,GAD3B,SAEE,0BAAMX,UAAU,SAAQ,uBAAGqB,KAAI,iBAAYR,IAAUA,IAFvD,SAGE,0BAAMb,UAAU,UAAS,uBAAGqB,KAAI,iCAA4BP,IAAnC,qBAA4DA,KAHvF,SAIE,kBAAC,EAAD,CACEf,KAAMgB,OAOVO,EAAM,kBACV,iCACGf,EAAKgB,IAAIC,KAAI,SAACC,EAAMC,GAAP,OAAa,uBAAGC,IAAKD,GAAID,QAIrCG,EAAS,kBACb,6BAASC,GAAG,UACV,0CACA,4BACGtB,EAAKuB,OAAON,KAAI,SAACO,EAAOL,GAAR,OAAc,wBAAIC,IAAKD,GAAIK,SAK5CC,EAAY,kBAChB,6BAASH,GAAG,aACV,6CACA,iCACE,6GACA,mEACA,uEACA,gDAKAI,EAAM,SAAAnC,GAAK,OACf,iCACE,6BAAMA,EAAMoC,OACZ,6BAAMpC,EAAMqC,SACZ,6BAAMrC,EAAMsC,UACZ,6BAAMtC,EAAMuC,KAAKC,MAAjB,WAAiCxC,EAAMuC,KAAKE,OAI1CC,EAAiB,kBACrB,6BAASX,GAAG,cACV,mDACCtB,EAAKkC,gBAAgBjB,KACpB,SAACkB,EAAKhB,GAAN,OAAY,kBAAC,EAAD,CACVW,KAAMK,EAAIL,KACVH,MAAOS,MAAMC,QAAQF,EAAIR,OAASQ,EAAIR,MAAMW,KAAK,OAASH,EAAIR,MAC9DC,QAASO,EAAIP,QACbC,SAAUM,EAAIN,SACdT,IAAKD,SAMPoB,EAAY,SAAAhD,GAEhB,OACE,iCACE,6BAAMA,EAAMW,MACZ,6BAAMX,EAAMoC,OACZ,6BAAMpC,EAAMqC,SACZ,6BAAMrC,EAAMsC,UACZ,6BAAM9C,EAAYQ,EAAMa,MAAMK,aAC9B,6BAAMvB,EAAYK,EAAMe,UAKxBkC,EAAa,kBACjB,6BAASlB,GAAG,cACV,8CACCtB,EAAKyC,WAAWxB,KACf,SAACyB,EAAWvB,GAAZ,OAAkB,kBAAC,EAAD,CAChBjB,KAAMwC,EAAUxC,KAChByB,MAAOe,EAAUf,MACjBC,QAASc,EAAUd,QACnBC,SAAUa,EAAUb,SACpBzB,MAAOsC,EAAUtC,MACjBE,MAAOoC,EAAUpC,MACjBc,IAAKD,SAsBEwB,EAhBA,kBACb,iCACE,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QClEWC,EA3EC,SAAArD,GAAK,OACnB,iCACE,gCACE,8DAIF,iCACE,0tBAeF,iCACE,8PAKA,4iBASA,qRAKuC,yCALvC,OAK+D,wCAL/D,25BAgBA,0gCAeF,mCCjDWsD,EAjBH,kBACV,iCACE,gCACE,+EAEA,4BAAI,4CACF,4BAAI,6CAGR,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,mCCNgBC,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e739270e.chunk.js","sourcesContent":["import React from 'react'\nimport './Resume.css'\nimport info from './info.json'\n\nconst formatPhone = number => `(${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`\n\nconst formatEmail = email_object => `${email_object.user}@${email_object.domain}`\n\nconst Address = props => {\n  const { data } = props\n\n  return (\n    <span className=\"address\">\n      {data.line1}&nbsp;\n      {data.line2},&nbsp;\n      {data.city},&nbsp;\n      {data.state},&nbsp;\n      {data.zip}\n    </span>\n  )\n}\n\nconst PersonalInfo = () => {\n  const {\n    name,\n    phone: _phone,\n    email: _email,\n    github,\n    address\n  } = info.personal\n\n  const phone = formatPhone(_phone.toString())\n  const email = formatEmail(_email)\n\n  return (\n    <section>\n      <header className=\"title\">{name.first} {name.middle.charAt(0)}. {name.last}</header>\n      <footer className=\"subtitle\">\n        <span className=\"phone\">{phone}</span> |&nbsp;\n        <span className=\"email\"><a href={`mailto:${email}`}>{email}</a></span> |&nbsp;\n        <span className=\"github\"><a href={`https://www.github.com/${github}`}>{`github.com/${github}`}</a></span> |&nbsp;\n        <Address\n          data={address}\n        />\n      </footer>\n    </section>\n  )\n}\n\nconst Bio = () => (\n  <section>\n    {info.bio.map((para, i) => <p key={i}>{para}</p>)}\n  </section>\n)\n\nconst Skills = () => (\n  <section id=\"skills\">\n    <header>Skills</header>\n    <ul>\n      {info.skills.map((skill, i) => <li key={i}>{skill}</li>)}\n    </ul>\n  </section>\n)\n\nconst Education = () => (\n  <section id=\"education\">\n    <header>Education</header>\n    <section>\n      <div>Bachelor of Arts, Computer Science &ndash; Software Development Concentration</div>\n      <div>Graduation Date: August 15th, 2018</div>\n      <div>Covenant College, Lookout Mountain, GA</div>\n      <div>GPA: 3.6/4.0</div>\n    </section>\n  </section>\n)\n\nconst Job = props => (\n  <section>\n    <div>{props.title}</div>\n    <div>{props.company}</div>\n    <div>{props.location}</div>\n    <div>{props.date.start} &mdash; {props.date.end}</div>\n  </section>\n)\n\nconst WorkExperience = () => (\n  <section id=\"experience\">\n    <header>Work Experience</header>\n    {info.work_experience.map(\n      (job, i) => <Job\n        date={job.date}\n        title={Array.isArray(job.title) ? job.title.join(' & ') : job.title}\n        company={job.company}\n        location={job.location}\n        key={i}\n      />\n    )}\n  </section>\n)\n\nconst Reference = props => {\n\n  return (\n    <section>\n      <div>{props.name}</div>\n      <div>{props.title}</div>\n      <div>{props.company}</div>\n      <div>{props.location}</div>\n      <div>{formatPhone(props.phone.toString())}</div>\n      <div>{formatEmail(props.email)}</div>\n    </section>\n  )\n}\n\nconst References = () => (\n  <section id=\"references\">\n    <header>References</header>\n    {info.references.map(\n      (reference, i) => <Reference\n        name={reference.name}\n        title={reference.title}\n        company={reference.company}\n        location={reference.location}\n        phone={reference.phone}\n        email={reference.email}\n        key={i}\n      />\n    )}\n  </section>\n)\n\nconst Resume = () => (\n  <article>\n    <PersonalInfo />\n    <hr />\n    <Bio />\n    <hr />\n    <Skills />\n    <hr />\n    <Education />\n    <hr />\n    <WorkExperience />\n    <hr />\n    <References />\n  </article>\n)\n\nexport default Resume\n","import React from 'react'\n\nconst AboutMe = props => (\n  <article>\n    <header>\n      <h2>\n        Care to know me a bit better?\n      </h2>\n    </header>\n    <section>\n      <p>\n        I have recently graduated from Covenant College in Lookout Mountain, Ga,\n        and I have a BA in Computer Science &ndash; Software Development concentration.\n        I am passionate about programming,\n        and I enjoy learning new programming languages, libraries, and paradigms.\n        Of the languages I have worked with,\n        my favorite is definitely JavaScript.\n        Acedemically, I have used Java, C, C#, Python, Haskell, mySQL, and PHP (to my chagrin).\n        For the majority of my own projects,\n        I have been using the Node.js framework with JavaScript.\n        Over the last few months,\n        I have been teaching myself Functional Programming and Test-Driven Development.\n        More recently, I am teaching myself React &ndash; this site is a react app.\n      </p>\n    </section>\n    <section>\n      <p>\n        Outside of programming, my interests include cooking, con-langs, and ballroom dance.\n        I would not consider myself an expert in any of these areas,\n        but I feel as though each of these hobbies improves other aspects of my life.\n      </p>\n      <p>\n        I enjoy experimenting as I cook.\n        I typically don't memorize a recipe and perform its steps repeatedly each cooking session.\n        I enjoy digging into the how and why of each ingredient and procedure.\n        Learning why salt should go into cookies, what baking soda does to a recipe,\n        and how to keep a steak from drying out as it grills are all subskills to expand my cooking repertoire.\n        Cooking, when approached the right way, can be incredibly modular.\n        The things I have learned from making one dish can improve the next recipe I make.\n      </p>\n      <p>\n        Though conlanging may forcibly place me in a certain stereotype,\n        I persue it and am not ashamed by my hobby.\n        Canlang is short for constructed-language.\n        There have been quite a few conlangs made over the years,\n        but some of the most famous ones are <code>Klingon</code> an <code>Elvish</code> (note: Elvish is techically an entire group of conlangs, and \"Elvish\" is not its official name).\n        I don't personally learn these other languages,\n        but I do study them by trying to understand their construction.\n        Most conlangs (particularly the most fleshed-out) are inspired by ascpects found in languages spoken around the world.\n        It's abosolutely facinating how many different ways humans have combined syntax and semantics to convey meaning.\n        I am particularly interested in grammatology &ndash; the study of writing systems and scripts.\n        Of the languages I have looked into, I am especially intrigued by abugidas &ndash;\n        a script that contains consonant characters with consistant vowel modifiers (Hindi and Sanskrit are two examples).\n        During my persuit of creating my own script, I have taught myself Hiragana, Katakana (two syllabaries used in Japanese),\n        and some Cyrillic (the alphabet used in many slovic languages).\n      </p>\n      <p>\n        Not having the phisique for many typical American sports, I have not gotten too invested in most of them.\n        I enjoy playing tennis on a very casual scale and have played baseball and soccer in the past,\n        but ballroom has been an area of my life that I've placed more time.\n        I tend to be very opposed to coreographgy (as it feels very unnatural to me),\n        and I prefer social dancing above performance.\n        I was a devoted member of the ballroom dance club when I was in college,\n        and I still enjoy going to dance socials when I have the time.\n        Recently, my skills have deteriorated (due to not having consistant teaching and practice),\n        but I still enjoy the hobby and participate whenever given the oppportunity.\n        I am particularly a fan of dances in the swing family (East Coast and to some the Hustle),\n        but I have experience in some rhythmic dances like Salsa and Samba and smother dances like the Waltz as well.\n        Of the dances I have participated, I would say that the only one I do not enjoy as much is the Tango.\n      </p>\n    </section>\n    <footer>\n\n    </footer>\n  </article>\n)\n\nexport default AboutMe\n","import React from 'react'\nimport './App.css'\nimport Resume from './Resume'\nimport AboutMe from './AboutMe'\n\nconst App = () => (\n  <article>\n    <header>\n      <menu>\n        I need to create a basic navigation menu here.\n      <li><button>AboutMe</button></li>\n        <li><button>Resume</button></li>\n      </menu>\n    </header>\n    <main>\n      <AboutMe />\n      <Resume />\n    </main>\n    <footer></footer>\n  </article>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}